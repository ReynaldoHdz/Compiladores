
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COLON COMMA CTE_FLOAT CTE_INT CTE_STRING DIVIDE DO ELSE END EQUALS FLOAT GREATER ID IF INT LBRACE LBRACKET LESS LPAREN MAIN MINUS NOT_EQUALS PLUS PRINT PROGRAM RBRACE RBRACKET RPAREN SEMICOLON TIMES VAR VOID WHILEprogram : PROGRAM ID SEMICOLON prog_vars prog_funcs MAIN body ENDprog_vars : vars\n                    | emptyprog_funcs : funcs prog_funcs\n                    | emptybody : LBRACE body_prime RBRACEbody_prime : statement body_prime\n                    | emptyassign : ID EQUALS expression SEMICOLONexpression : exp expression_primeexpression_prime : GREATER exp\n                        | LESS exp\n                        | NOT_EQUALS exp\n                        | emptycte : CTE_INT\n                | CTE_FLOATfuncs : VOID ID LPAREN funcs_prime RPAREN LBRACKET funcs_vars body RBRACKET SEMICOLONfuncs_prime : ID COLON type more_funcs\n                    | emptymore_funcs : COMMA ID COLON type more_funcs\n                    | emptyfuncs_vars : vars\n                    | emptystatement : assign\n                    | condition\n                    | cycle\n                    | f_call\n                    | printexp : term exp_primeexp_prime : PLUS term exp_prime\n                    | MINUS term exp_prime\n                    | emptyterm : factor term_primeterm_prime : TIMES factor term_prime\n                    | DIVIDE factor term_prime\n                    | emptyfactor : LPAREN expression RPAREN\n                | PLUS factor_prime\n                | MINUS factor_prime\n                | factor_primefactor_prime : ID\n                        | ctevars : VAR vars_primevars_prime : ID id COLON type SEMICOLON vars_prime\n                    | emptyid : COMMA ID id\n            | emptytype : INT\n                | FLOATprint : PRINT LPAREN print_prime RPAREN SEMICOLONprint_prime : expression more_print\n                    | CTE_STRING more_printmore_print : COMMA more_print_prime more_print\n                    | emptymore_print_prime : expression\n                            | CTE_STRINGcycle : WHILE LPAREN expression RPAREN DO body SEMICOLONcondition : IF LPAREN expression RPAREN body else_condition SEMICOLONelse_condition : ELSE body\n                        | emptyf_call : ID LPAREN f_call_prime RPAREN SEMICOLONf_call_prime : expression more_f_call\n                        | emptymore_f_call : COMMA expression more_f_call\n                    | emptyempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,27,],[0,-1,]),'ID':([2,8,12,20,23,24,29,31,32,33,34,35,49,50,51,52,53,56,62,63,65,80,82,83,84,87,88,91,92,99,105,109,122,126,144,146,],[3,14,18,26,36,40,36,-24,-25,-26,-27,-28,57,57,57,57,57,14,57,57,57,-9,57,57,57,57,57,57,57,57,57,130,-61,-50,-58,-57,]),'SEMICOLON':([3,43,44,45,47,57,58,59,60,61,64,66,67,68,81,85,86,89,90,93,95,96,97,103,114,115,116,117,118,119,120,121,124,132,133,134,135,137,139,140,143,145,],[4,56,-48,-49,-6,-41,80,-66,-66,-66,-40,-42,-15,-16,-10,-14,-29,-32,-33,-36,-38,-39,122,126,-11,-12,-13,-66,-66,-66,-66,-37,-66,-30,-31,-34,-35,144,-60,146,148,-59,]),'VAR':([4,78,],[8,8,]),'VOID':([4,5,6,7,8,10,13,15,56,79,148,],[-66,12,-2,-3,-66,12,-43,-45,-66,-44,-17,]),'MAIN':([4,5,6,7,8,9,10,11,13,15,17,56,79,148,],[-66,-66,-2,-3,-66,16,-66,-5,-43,-45,-4,-66,-44,-17,]),'LBRACE':([8,13,15,16,56,78,79,101,111,112,113,125,138,],[-66,-43,-45,23,-66,-66,-44,23,23,-22,-23,23,23,]),'COMMA':([14,26,44,45,57,59,60,61,64,66,67,68,70,75,76,77,81,85,86,89,90,93,95,96,114,115,116,117,118,119,120,121,123,127,128,129,132,133,134,135,147,],[20,20,-48,-49,-41,-66,-66,-66,-40,-42,-15,-16,99,105,105,109,-10,-14,-29,-32,-33,-36,-38,-39,-11,-12,-13,-66,-66,-66,-66,-37,99,105,-55,-56,-30,-31,-34,-35,109,]),'COLON':([14,19,21,26,40,46,130,],[-66,25,-47,-66,54,-46,142,]),'LPAREN':([18,36,37,38,39,49,50,51,52,53,62,82,83,84,87,88,91,92,99,105,],[24,50,51,52,53,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'END':([22,47,],[27,-6,]),'RBRACE':([23,28,29,30,31,32,33,34,35,48,80,122,126,144,146,],[-66,47,-66,-8,-24,-25,-26,-27,-28,-7,-9,-61,-50,-58,-57,]),'IF':([23,29,31,32,33,34,35,80,122,126,144,146,],[37,37,-24,-25,-26,-27,-28,-9,-61,-50,-58,-57,]),'WHILE':([23,29,31,32,33,34,35,80,122,126,144,146,],[38,38,-24,-25,-26,-27,-28,-9,-61,-50,-58,-57,]),'PRINT':([23,29,31,32,33,34,35,80,122,126,144,146,],[39,39,-24,-25,-26,-27,-28,-9,-61,-50,-58,-57,]),'RPAREN':([24,41,42,44,45,50,57,59,60,61,64,66,67,68,69,70,71,72,73,74,75,76,77,81,85,86,89,90,93,94,95,96,98,100,104,106,107,108,110,114,115,116,117,118,119,120,121,123,127,128,129,132,133,134,135,136,141,147,149,],[-66,55,-19,-48,-49,-66,-41,-66,-66,-66,-40,-42,-15,-16,97,-66,-63,101,102,103,-66,-66,-66,-10,-14,-29,-32,-33,-36,121,-38,-39,-62,-65,-51,-54,-52,-18,-21,-11,-12,-13,-66,-66,-66,-66,-37,-66,-66,-55,-56,-30,-31,-34,-35,-64,-53,-66,-20,]),'INT':([25,54,142,],[44,44,44,]),'FLOAT':([25,54,142,],[45,45,45,]),'EQUALS':([36,],[49,]),'ELSE':([47,124,],[-6,138,]),'RBRACKET':([47,131,],[-6,143,]),'PLUS':([49,50,51,52,53,57,60,61,62,64,66,67,68,82,83,84,87,88,90,91,92,93,95,96,99,105,117,118,119,120,121,134,135,],[63,63,63,63,63,-41,87,-66,63,-40,-42,-15,-16,63,63,63,63,63,-33,63,63,-36,-38,-39,63,63,87,87,-66,-66,-37,-34,-35,]),'MINUS':([49,50,51,52,53,57,60,61,62,64,66,67,68,82,83,84,87,88,90,91,92,93,95,96,99,105,117,118,119,120,121,134,135,],[65,65,65,65,65,-41,88,-66,65,-40,-42,-15,-16,65,65,65,65,65,-33,65,65,-36,-38,-39,65,65,88,88,-66,-66,-37,-34,-35,]),'CTE_INT':([49,50,51,52,53,62,63,65,82,83,84,87,88,91,92,99,105,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'CTE_FLOAT':([49,50,51,52,53,62,63,65,82,83,84,87,88,91,92,99,105,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'CTE_STRING':([53,105,],[76,129,]),'LBRACKET':([55,],[78,]),'TIMES':([57,61,64,66,67,68,95,96,119,120,121,],[-41,91,-40,-42,-15,-16,-38,-39,91,91,-37,]),'DIVIDE':([57,61,64,66,67,68,95,96,119,120,121,],[-41,92,-40,-42,-15,-16,-38,-39,92,92,-37,]),'GREATER':([57,59,60,61,64,66,67,68,86,89,90,93,95,96,117,118,119,120,121,132,133,134,135,],[-41,82,-66,-66,-40,-42,-15,-16,-29,-32,-33,-36,-38,-39,-66,-66,-66,-66,-37,-30,-31,-34,-35,]),'LESS':([57,59,60,61,64,66,67,68,86,89,90,93,95,96,117,118,119,120,121,132,133,134,135,],[-41,83,-66,-66,-40,-42,-15,-16,-29,-32,-33,-36,-38,-39,-66,-66,-66,-66,-37,-30,-31,-34,-35,]),'NOT_EQUALS':([57,59,60,61,64,66,67,68,86,89,90,93,95,96,117,118,119,120,121,132,133,134,135,],[-41,84,-66,-66,-40,-42,-15,-16,-29,-32,-33,-36,-38,-39,-66,-66,-66,-66,-37,-30,-31,-34,-35,]),'DO':([102,],[125,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'prog_vars':([4,],[5,]),'vars':([4,78,],[6,112,]),'empty':([4,5,8,10,14,23,24,26,29,50,56,59,60,61,70,75,76,77,78,117,118,119,120,123,124,127,147,],[7,11,15,11,21,30,42,21,30,71,15,85,89,93,100,106,106,110,113,89,89,93,93,100,139,106,110,]),'prog_funcs':([5,10,],[9,17,]),'funcs':([5,10,],[10,10,]),'vars_prime':([8,56,],[13,79,]),'id':([14,26,],[19,46,]),'body':([16,101,111,125,138,],[22,124,131,140,145,]),'body_prime':([23,29,],[28,48,]),'statement':([23,29,],[29,29,]),'assign':([23,29,],[31,31,]),'condition':([23,29,],[32,32,]),'cycle':([23,29,],[33,33,]),'f_call':([23,29,],[34,34,]),'print':([23,29,],[35,35,]),'funcs_prime':([24,],[41,]),'type':([25,54,142,],[43,77,147,]),'expression':([49,50,51,52,53,62,99,105,],[58,70,72,73,75,94,123,128,]),'exp':([49,50,51,52,53,62,82,83,84,99,105,],[59,59,59,59,59,59,114,115,116,59,59,]),'term':([49,50,51,52,53,62,82,83,84,87,88,99,105,],[60,60,60,60,60,60,60,60,60,117,118,60,60,]),'factor':([49,50,51,52,53,62,82,83,84,87,88,91,92,99,105,],[61,61,61,61,61,61,61,61,61,61,61,119,120,61,61,]),'factor_prime':([49,50,51,52,53,62,63,65,82,83,84,87,88,91,92,99,105,],[64,64,64,64,64,64,95,96,64,64,64,64,64,64,64,64,64,]),'cte':([49,50,51,52,53,62,63,65,82,83,84,87,88,91,92,99,105,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'f_call_prime':([50,],[69,]),'print_prime':([53,],[74,]),'expression_prime':([59,],[81,]),'exp_prime':([60,117,118,],[86,132,133,]),'term_prime':([61,119,120,],[90,134,135,]),'more_f_call':([70,123,],[98,136,]),'more_print':([75,76,127,],[104,107,141,]),'more_funcs':([77,147,],[108,149,]),'funcs_vars':([78,],[111,]),'more_print_prime':([105,],[127,]),'else_condition':([124,],[137,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON prog_vars prog_funcs MAIN body END','program',8,'p_program','main.py',204),
  ('prog_vars -> vars','prog_vars',1,'p_prog_vars','main.py',209),
  ('prog_vars -> empty','prog_vars',1,'p_prog_vars','main.py',210),
  ('prog_funcs -> funcs prog_funcs','prog_funcs',2,'p_prog_funcs','main.py',214),
  ('prog_funcs -> empty','prog_funcs',1,'p_prog_funcs','main.py',215),
  ('body -> LBRACE body_prime RBRACE','body',3,'p_body','main.py',222),
  ('body_prime -> statement body_prime','body_prime',2,'p_body_prime','main.py',226),
  ('body_prime -> empty','body_prime',1,'p_body_prime','main.py',227),
  ('assign -> ID EQUALS expression SEMICOLON','assign',4,'p_assign','main.py',234),
  ('expression -> exp expression_prime','expression',2,'p_expression','main.py',247),
  ('expression_prime -> GREATER exp','expression_prime',2,'p_expression_prime','main.py',260),
  ('expression_prime -> LESS exp','expression_prime',2,'p_expression_prime','main.py',261),
  ('expression_prime -> NOT_EQUALS exp','expression_prime',2,'p_expression_prime','main.py',262),
  ('expression_prime -> empty','expression_prime',1,'p_expression_prime','main.py',263),
  ('cte -> CTE_INT','cte',1,'p_cte','main.py',270),
  ('cte -> CTE_FLOAT','cte',1,'p_cte','main.py',271),
  ('funcs -> VOID ID LPAREN funcs_prime RPAREN LBRACKET funcs_vars body RBRACKET SEMICOLON','funcs',10,'p_funcs','main.py',275),
  ('funcs_prime -> ID COLON type more_funcs','funcs_prime',4,'p_funcs_prime','main.py',289),
  ('funcs_prime -> empty','funcs_prime',1,'p_funcs_prime','main.py',290),
  ('more_funcs -> COMMA ID COLON type more_funcs','more_funcs',5,'p_more_funcs','main.py',297),
  ('more_funcs -> empty','more_funcs',1,'p_more_funcs','main.py',298),
  ('funcs_vars -> vars','funcs_vars',1,'p_funcs_vars','main.py',305),
  ('funcs_vars -> empty','funcs_vars',1,'p_funcs_vars','main.py',306),
  ('statement -> assign','statement',1,'p_statement','main.py',310),
  ('statement -> condition','statement',1,'p_statement','main.py',311),
  ('statement -> cycle','statement',1,'p_statement','main.py',312),
  ('statement -> f_call','statement',1,'p_statement','main.py',313),
  ('statement -> print','statement',1,'p_statement','main.py',314),
  ('exp -> term exp_prime','exp',2,'p_exp','main.py',318),
  ('exp_prime -> PLUS term exp_prime','exp_prime',3,'p_exp_prime','main.py',330),
  ('exp_prime -> MINUS term exp_prime','exp_prime',3,'p_exp_prime','main.py',331),
  ('exp_prime -> empty','exp_prime',1,'p_exp_prime','main.py',332),
  ('term -> factor term_prime','term',2,'p_term','main.py',339),
  ('term_prime -> TIMES factor term_prime','term_prime',3,'p_term_prime','main.py',351),
  ('term_prime -> DIVIDE factor term_prime','term_prime',3,'p_term_prime','main.py',352),
  ('term_prime -> empty','term_prime',1,'p_term_prime','main.py',353),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','main.py',360),
  ('factor -> PLUS factor_prime','factor',2,'p_factor','main.py',361),
  ('factor -> MINUS factor_prime','factor',2,'p_factor','main.py',362),
  ('factor -> factor_prime','factor',1,'p_factor','main.py',363),
  ('factor_prime -> ID','factor_prime',1,'p_factor_prime','main.py',372),
  ('factor_prime -> cte','factor_prime',1,'p_factor_prime','main.py',373),
  ('vars -> VAR vars_prime','vars',2,'p_vars','main.py',385),
  ('vars_prime -> ID id COLON type SEMICOLON vars_prime','vars_prime',6,'p_vars_prime','main.py',389),
  ('vars_prime -> empty','vars_prime',1,'p_vars_prime','main.py',390),
  ('id -> COMMA ID id','id',3,'p_id','main.py',410),
  ('id -> empty','id',1,'p_id','main.py',411),
  ('type -> INT','type',1,'p_type','main.py',418),
  ('type -> FLOAT','type',1,'p_type','main.py',419),
  ('print -> PRINT LPAREN print_prime RPAREN SEMICOLON','print',5,'p_print','main.py',423),
  ('print_prime -> expression more_print','print_prime',2,'p_print_prime','main.py',427),
  ('print_prime -> CTE_STRING more_print','print_prime',2,'p_print_prime','main.py',428),
  ('more_print -> COMMA more_print_prime more_print','more_print',3,'p_more_print','main.py',432),
  ('more_print -> empty','more_print',1,'p_more_print','main.py',433),
  ('more_print_prime -> expression','more_print_prime',1,'p_more_print_prime','main.py',440),
  ('more_print_prime -> CTE_STRING','more_print_prime',1,'p_more_print_prime','main.py',441),
  ('cycle -> WHILE LPAREN expression RPAREN DO body SEMICOLON','cycle',7,'p_cycle','main.py',445),
  ('condition -> IF LPAREN expression RPAREN body else_condition SEMICOLON','condition',7,'p_condition','main.py',449),
  ('else_condition -> ELSE body','else_condition',2,'p_else_condition','main.py',453),
  ('else_condition -> empty','else_condition',1,'p_else_condition','main.py',454),
  ('f_call -> ID LPAREN f_call_prime RPAREN SEMICOLON','f_call',5,'p_f_call','main.py',461),
  ('f_call_prime -> expression more_f_call','f_call_prime',2,'p_f_call_prime','main.py',465),
  ('f_call_prime -> empty','f_call_prime',1,'p_f_call_prime','main.py',466),
  ('more_f_call -> COMMA expression more_f_call','more_f_call',3,'p_more_f_call','main.py',473),
  ('more_f_call -> empty','more_f_call',1,'p_more_f_call','main.py',474),
  ('empty -> <empty>','empty',0,'p_empty','main.py',481),
]
