Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON new_global_scope prog_vars prog_funcs MAIN body END
Rule 2     new_global_scope -> <empty>
Rule 3     prog_vars -> vars
Rule 4     prog_vars -> empty
Rule 5     prog_funcs -> funcs prog_funcs
Rule 6     prog_funcs -> empty
Rule 7     body -> LBRACE body_prime RBRACE
Rule 8     body_prime -> statement body_prime
Rule 9     body_prime -> empty
Rule 10    assign -> ID EQUALS expression SEMICOLON
Rule 11    expression -> exp expression_prime
Rule 12    expression_prime -> GREATER exp
Rule 13    expression_prime -> LESS exp
Rule 14    expression_prime -> NOT_EQUALS exp
Rule 15    expression_prime -> empty
Rule 16    cte -> CTE_INT
Rule 17    cte -> CTE_FLOAT
Rule 18    funcs -> VOID ID LPAREN funcs_prime RPAREN LBRACKET new_scope funcs_vars body RBRACKET SEMICOLON
Rule 19    new_scope -> <empty>
Rule 20    funcs_prime -> ID COLON type more_funcs
Rule 21    funcs_prime -> empty
Rule 22    more_funcs -> COMMA ID COLON type more_funcs
Rule 23    more_funcs -> empty
Rule 24    funcs_vars -> vars
Rule 25    funcs_vars -> empty
Rule 26    statement -> assign
Rule 27    statement -> condition
Rule 28    statement -> cycle
Rule 29    statement -> f_call
Rule 30    statement -> print
Rule 31    exp -> term exp_prime
Rule 32    exp_prime -> PLUS term exp_prime
Rule 33    exp_prime -> MINUS term exp_prime
Rule 34    exp_prime -> empty
Rule 35    term -> factor term_prime
Rule 36    term_prime -> TIMES factor term_prime
Rule 37    term_prime -> DIVIDE factor term_prime
Rule 38    term_prime -> empty
Rule 39    factor -> LPAREN expression RPAREN
Rule 40    factor -> PLUS factor_prime
Rule 41    factor -> MINUS factor_prime
Rule 42    factor -> factor_prime
Rule 43    factor_prime -> ID
Rule 44    factor_prime -> cte
Rule 45    vars -> VAR vars_prime
Rule 46    vars_prime -> ID id COLON type SEMICOLON vars_prime
Rule 47    vars_prime -> empty
Rule 48    id -> COMMA ID id
Rule 49    id -> empty
Rule 50    type -> INT
Rule 51    type -> FLOAT
Rule 52    print -> PRINT LPAREN print_prime RPAREN SEMICOLON
Rule 53    print_prime -> expression more_print
Rule 54    print_prime -> CTE_STRING more_print
Rule 55    more_print -> COMMA more_print_prime more_print
Rule 56    more_print -> empty
Rule 57    more_print_prime -> expression
Rule 58    more_print_prime -> CTE_STRING
Rule 59    cycle -> WHILE LPAREN expression RPAREN DO body SEMICOLON
Rule 60    begin_if -> <empty>
Rule 61    condition -> IF LPAREN expression RPAREN begin_if body else_condition SEMICOLON
Rule 62    begin_else -> <empty>
Rule 63    else_condition -> ELSE begin_else body
Rule 64    else_condition -> empty
Rule 65    f_call -> ID LPAREN f_call_prime RPAREN SEMICOLON
Rule 66    f_call_prime -> expression more_f_call
Rule 67    f_call_prime -> empty
Rule 68    more_f_call -> COMMA expression more_f_call
Rule 69    more_f_call -> empty
Rule 70    empty -> <empty>

Terminals, with rules where they appear

COLON                : 20 22 46
COMMA                : 22 48 55 68
CTE_FLOAT            : 17
CTE_INT              : 16
CTE_STRING           : 54 58
DIVIDE               : 37
DO                   : 59
ELSE                 : 63
END                  : 1
EQUALS               : 10
FLOAT                : 51
GREATER              : 12
ID                   : 1 10 18 20 22 43 46 48 65
IF                   : 61
INT                  : 50
LBRACE               : 7
LBRACKET             : 18
LESS                 : 13
LPAREN               : 18 39 52 59 61 65
MAIN                 : 1
MINUS                : 33 41
NOT_EQUALS           : 14
PLUS                 : 32 40
PRINT                : 52
PROGRAM              : 1
RBRACE               : 7
RBRACKET             : 18
RPAREN               : 18 39 52 59 61 65
SEMICOLON            : 1 10 18 46 52 59 61 65
TIMES                : 36
VAR                  : 45
VOID                 : 18
WHILE                : 59
error                : 

Nonterminals, with rules where they appear

assign               : 26
begin_else           : 63
begin_if             : 61
body                 : 1 18 59 61 63
body_prime           : 7 8
condition            : 27
cte                  : 44
cycle                : 28
else_condition       : 61
empty                : 4 6 9 15 21 23 25 34 38 47 49 56 64 67 69
exp                  : 11 12 13 14
exp_prime            : 31 32 33
expression           : 10 39 53 57 59 61 66 68
expression_prime     : 11
f_call               : 29
f_call_prime         : 65
factor               : 35 36 37
factor_prime         : 40 41 42
funcs                : 5
funcs_prime          : 18
funcs_vars           : 18
id                   : 46 48
more_f_call          : 66 68
more_funcs           : 20 22
more_print           : 53 54 55
more_print_prime     : 55
new_global_scope     : 1
new_scope            : 18
print                : 30
print_prime          : 52
prog_funcs           : 1 5
prog_vars            : 1
program              : 0
statement            : 8
term                 : 31 32 33
term_prime           : 35 36 37
type                 : 20 22 46
vars                 : 3 24
vars_prime           : 45 46

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON new_global_scope prog_vars prog_funcs MAIN body END

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON new_global_scope prog_vars prog_funcs MAIN body END

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON new_global_scope prog_vars prog_funcs MAIN body END

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . new_global_scope prog_vars prog_funcs MAIN body END
    (2) new_global_scope -> .

    VAR             reduce using rule 2 (new_global_scope -> .)
    VOID            reduce using rule 2 (new_global_scope -> .)
    MAIN            reduce using rule 2 (new_global_scope -> .)

    new_global_scope               shift and go to state 5

state 5

    (1) program -> PROGRAM ID SEMICOLON new_global_scope . prog_vars prog_funcs MAIN body END
    (3) prog_vars -> . vars
    (4) prog_vars -> . empty
    (45) vars -> . VAR vars_prime
    (70) empty -> .

    VAR             shift and go to state 9
    VOID            reduce using rule 70 (empty -> .)
    MAIN            reduce using rule 70 (empty -> .)

    prog_vars                      shift and go to state 6
    vars                           shift and go to state 7
    empty                          shift and go to state 8

state 6

    (1) program -> PROGRAM ID SEMICOLON new_global_scope prog_vars . prog_funcs MAIN body END
    (5) prog_funcs -> . funcs prog_funcs
    (6) prog_funcs -> . empty
    (18) funcs -> . VOID ID LPAREN funcs_prime RPAREN LBRACKET new_scope funcs_vars body RBRACKET SEMICOLON
    (70) empty -> .

    VOID            shift and go to state 13
    MAIN            reduce using rule 70 (empty -> .)

    prog_funcs                     shift and go to state 10
    funcs                          shift and go to state 11
    empty                          shift and go to state 12

state 7

    (3) prog_vars -> vars .

    VOID            reduce using rule 3 (prog_vars -> vars .)
    MAIN            reduce using rule 3 (prog_vars -> vars .)


state 8

    (4) prog_vars -> empty .

    VOID            reduce using rule 4 (prog_vars -> empty .)
    MAIN            reduce using rule 4 (prog_vars -> empty .)


state 9

    (45) vars -> VAR . vars_prime
    (46) vars_prime -> . ID id COLON type SEMICOLON vars_prime
    (47) vars_prime -> . empty
    (70) empty -> .

    ID              shift and go to state 15
    VOID            reduce using rule 70 (empty -> .)
    MAIN            reduce using rule 70 (empty -> .)
    LBRACE          reduce using rule 70 (empty -> .)

    vars_prime                     shift and go to state 14
    empty                          shift and go to state 16

state 10

    (1) program -> PROGRAM ID SEMICOLON new_global_scope prog_vars prog_funcs . MAIN body END

    MAIN            shift and go to state 17


state 11

    (5) prog_funcs -> funcs . prog_funcs
    (5) prog_funcs -> . funcs prog_funcs
    (6) prog_funcs -> . empty
    (18) funcs -> . VOID ID LPAREN funcs_prime RPAREN LBRACKET new_scope funcs_vars body RBRACKET SEMICOLON
    (70) empty -> .

    VOID            shift and go to state 13
    MAIN            reduce using rule 70 (empty -> .)

    funcs                          shift and go to state 11
    prog_funcs                     shift and go to state 18
    empty                          shift and go to state 12

state 12

    (6) prog_funcs -> empty .

    MAIN            reduce using rule 6 (prog_funcs -> empty .)


state 13

    (18) funcs -> VOID . ID LPAREN funcs_prime RPAREN LBRACKET new_scope funcs_vars body RBRACKET SEMICOLON

    ID              shift and go to state 19


state 14

    (45) vars -> VAR vars_prime .

    VOID            reduce using rule 45 (vars -> VAR vars_prime .)
    MAIN            reduce using rule 45 (vars -> VAR vars_prime .)
    LBRACE          reduce using rule 45 (vars -> VAR vars_prime .)


state 15

    (46) vars_prime -> ID . id COLON type SEMICOLON vars_prime
    (48) id -> . COMMA ID id
    (49) id -> . empty
    (70) empty -> .

    COMMA           shift and go to state 21
    COLON           reduce using rule 70 (empty -> .)

    id                             shift and go to state 20
    empty                          shift and go to state 22

state 16

    (47) vars_prime -> empty .

    VOID            reduce using rule 47 (vars_prime -> empty .)
    MAIN            reduce using rule 47 (vars_prime -> empty .)
    LBRACE          reduce using rule 47 (vars_prime -> empty .)


state 17

    (1) program -> PROGRAM ID SEMICOLON new_global_scope prog_vars prog_funcs MAIN . body END
    (7) body -> . LBRACE body_prime RBRACE

    LBRACE          shift and go to state 24

    body                           shift and go to state 23

state 18

    (5) prog_funcs -> funcs prog_funcs .

    MAIN            reduce using rule 5 (prog_funcs -> funcs prog_funcs .)


state 19

    (18) funcs -> VOID ID . LPAREN funcs_prime RPAREN LBRACKET new_scope funcs_vars body RBRACKET SEMICOLON

    LPAREN          shift and go to state 25


state 20

    (46) vars_prime -> ID id . COLON type SEMICOLON vars_prime

    COLON           shift and go to state 26


state 21

    (48) id -> COMMA . ID id

    ID              shift and go to state 27


state 22

    (49) id -> empty .

    COLON           reduce using rule 49 (id -> empty .)


state 23

    (1) program -> PROGRAM ID SEMICOLON new_global_scope prog_vars prog_funcs MAIN body . END

    END             shift and go to state 28


state 24

    (7) body -> LBRACE . body_prime RBRACE
    (8) body_prime -> . statement body_prime
    (9) body_prime -> . empty
    (26) statement -> . assign
    (27) statement -> . condition
    (28) statement -> . cycle
    (29) statement -> . f_call
    (30) statement -> . print
    (70) empty -> .
    (10) assign -> . ID EQUALS expression SEMICOLON
    (61) condition -> . IF LPAREN expression RPAREN begin_if body else_condition SEMICOLON
    (59) cycle -> . WHILE LPAREN expression RPAREN DO body SEMICOLON
    (65) f_call -> . ID LPAREN f_call_prime RPAREN SEMICOLON
    (52) print -> . PRINT LPAREN print_prime RPAREN SEMICOLON

    RBRACE          reduce using rule 70 (empty -> .)
    ID              shift and go to state 37
    IF              shift and go to state 38
    WHILE           shift and go to state 39
    PRINT           shift and go to state 40

    body_prime                     shift and go to state 29
    statement                      shift and go to state 30
    empty                          shift and go to state 31
    assign                         shift and go to state 32
    condition                      shift and go to state 33
    cycle                          shift and go to state 34
    f_call                         shift and go to state 35
    print                          shift and go to state 36

state 25

    (18) funcs -> VOID ID LPAREN . funcs_prime RPAREN LBRACKET new_scope funcs_vars body RBRACKET SEMICOLON
    (20) funcs_prime -> . ID COLON type more_funcs
    (21) funcs_prime -> . empty
    (70) empty -> .

    ID              shift and go to state 41
    RPAREN          reduce using rule 70 (empty -> .)

    funcs_prime                    shift and go to state 42
    empty                          shift and go to state 43

state 26

    (46) vars_prime -> ID id COLON . type SEMICOLON vars_prime
    (50) type -> . INT
    (51) type -> . FLOAT

    INT             shift and go to state 45
    FLOAT           shift and go to state 46

    type                           shift and go to state 44

state 27

    (48) id -> COMMA ID . id
    (48) id -> . COMMA ID id
    (49) id -> . empty
    (70) empty -> .

    COMMA           shift and go to state 21
    COLON           reduce using rule 70 (empty -> .)

    id                             shift and go to state 47
    empty                          shift and go to state 22

state 28

    (1) program -> PROGRAM ID SEMICOLON new_global_scope prog_vars prog_funcs MAIN body END .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON new_global_scope prog_vars prog_funcs MAIN body END .)


state 29

    (7) body -> LBRACE body_prime . RBRACE

    RBRACE          shift and go to state 48


state 30

    (8) body_prime -> statement . body_prime
    (8) body_prime -> . statement body_prime
    (9) body_prime -> . empty
    (26) statement -> . assign
    (27) statement -> . condition
    (28) statement -> . cycle
    (29) statement -> . f_call
    (30) statement -> . print
    (70) empty -> .
    (10) assign -> . ID EQUALS expression SEMICOLON
    (61) condition -> . IF LPAREN expression RPAREN begin_if body else_condition SEMICOLON
    (59) cycle -> . WHILE LPAREN expression RPAREN DO body SEMICOLON
    (65) f_call -> . ID LPAREN f_call_prime RPAREN SEMICOLON
    (52) print -> . PRINT LPAREN print_prime RPAREN SEMICOLON

    RBRACE          reduce using rule 70 (empty -> .)
    ID              shift and go to state 37
    IF              shift and go to state 38
    WHILE           shift and go to state 39
    PRINT           shift and go to state 40

    statement                      shift and go to state 30
    body_prime                     shift and go to state 49
    empty                          shift and go to state 31
    assign                         shift and go to state 32
    condition                      shift and go to state 33
    cycle                          shift and go to state 34
    f_call                         shift and go to state 35
    print                          shift and go to state 36

state 31

    (9) body_prime -> empty .

    RBRACE          reduce using rule 9 (body_prime -> empty .)


state 32

    (26) statement -> assign .

    ID              reduce using rule 26 (statement -> assign .)
    IF              reduce using rule 26 (statement -> assign .)
    WHILE           reduce using rule 26 (statement -> assign .)
    PRINT           reduce using rule 26 (statement -> assign .)
    RBRACE          reduce using rule 26 (statement -> assign .)


state 33

    (27) statement -> condition .

    ID              reduce using rule 27 (statement -> condition .)
    IF              reduce using rule 27 (statement -> condition .)
    WHILE           reduce using rule 27 (statement -> condition .)
    PRINT           reduce using rule 27 (statement -> condition .)
    RBRACE          reduce using rule 27 (statement -> condition .)


state 34

    (28) statement -> cycle .

    ID              reduce using rule 28 (statement -> cycle .)
    IF              reduce using rule 28 (statement -> cycle .)
    WHILE           reduce using rule 28 (statement -> cycle .)
    PRINT           reduce using rule 28 (statement -> cycle .)
    RBRACE          reduce using rule 28 (statement -> cycle .)


state 35

    (29) statement -> f_call .

    ID              reduce using rule 29 (statement -> f_call .)
    IF              reduce using rule 29 (statement -> f_call .)
    WHILE           reduce using rule 29 (statement -> f_call .)
    PRINT           reduce using rule 29 (statement -> f_call .)
    RBRACE          reduce using rule 29 (statement -> f_call .)


state 36

    (30) statement -> print .

    ID              reduce using rule 30 (statement -> print .)
    IF              reduce using rule 30 (statement -> print .)
    WHILE           reduce using rule 30 (statement -> print .)
    PRINT           reduce using rule 30 (statement -> print .)
    RBRACE          reduce using rule 30 (statement -> print .)


state 37

    (10) assign -> ID . EQUALS expression SEMICOLON
    (65) f_call -> ID . LPAREN f_call_prime RPAREN SEMICOLON

    EQUALS          shift and go to state 50
    LPAREN          shift and go to state 51


state 38

    (61) condition -> IF . LPAREN expression RPAREN begin_if body else_condition SEMICOLON

    LPAREN          shift and go to state 52


state 39

    (59) cycle -> WHILE . LPAREN expression RPAREN DO body SEMICOLON

    LPAREN          shift and go to state 53


state 40

    (52) print -> PRINT . LPAREN print_prime RPAREN SEMICOLON

    LPAREN          shift and go to state 54


state 41

    (20) funcs_prime -> ID . COLON type more_funcs

    COLON           shift and go to state 55


state 42

    (18) funcs -> VOID ID LPAREN funcs_prime . RPAREN LBRACKET new_scope funcs_vars body RBRACKET SEMICOLON

    RPAREN          shift and go to state 56


state 43

    (21) funcs_prime -> empty .

    RPAREN          reduce using rule 21 (funcs_prime -> empty .)


state 44

    (46) vars_prime -> ID id COLON type . SEMICOLON vars_prime

    SEMICOLON       shift and go to state 57


state 45

    (50) type -> INT .

    SEMICOLON       reduce using rule 50 (type -> INT .)
    COMMA           reduce using rule 50 (type -> INT .)
    RPAREN          reduce using rule 50 (type -> INT .)


state 46

    (51) type -> FLOAT .

    SEMICOLON       reduce using rule 51 (type -> FLOAT .)
    COMMA           reduce using rule 51 (type -> FLOAT .)
    RPAREN          reduce using rule 51 (type -> FLOAT .)


state 47

    (48) id -> COMMA ID id .

    COLON           reduce using rule 48 (id -> COMMA ID id .)


state 48

    (7) body -> LBRACE body_prime RBRACE .

    END             reduce using rule 7 (body -> LBRACE body_prime RBRACE .)
    ELSE            reduce using rule 7 (body -> LBRACE body_prime RBRACE .)
    SEMICOLON       reduce using rule 7 (body -> LBRACE body_prime RBRACE .)
    RBRACKET        reduce using rule 7 (body -> LBRACE body_prime RBRACE .)


state 49

    (8) body_prime -> statement body_prime .

    RBRACE          reduce using rule 8 (body_prime -> statement body_prime .)


state 50

    (10) assign -> ID EQUALS . expression SEMICOLON
    (11) expression -> . exp expression_prime
    (31) exp -> . term exp_prime
    (35) term -> . factor term_prime
    (39) factor -> . LPAREN expression RPAREN
    (40) factor -> . PLUS factor_prime
    (41) factor -> . MINUS factor_prime
    (42) factor -> . factor_prime
    (43) factor_prime -> . ID
    (44) factor_prime -> . cte
    (16) cte -> . CTE_INT
    (17) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 63
    PLUS            shift and go to state 64
    MINUS           shift and go to state 66
    ID              shift and go to state 58
    CTE_INT         shift and go to state 68
    CTE_FLOAT       shift and go to state 69

    expression                     shift and go to state 59
    exp                            shift and go to state 60
    term                           shift and go to state 61
    factor                         shift and go to state 62
    factor_prime                   shift and go to state 65
    cte                            shift and go to state 67

state 51

    (65) f_call -> ID LPAREN . f_call_prime RPAREN SEMICOLON
    (66) f_call_prime -> . expression more_f_call
    (67) f_call_prime -> . empty
    (11) expression -> . exp expression_prime
    (70) empty -> .
    (31) exp -> . term exp_prime
    (35) term -> . factor term_prime
    (39) factor -> . LPAREN expression RPAREN
    (40) factor -> . PLUS factor_prime
    (41) factor -> . MINUS factor_prime
    (42) factor -> . factor_prime
    (43) factor_prime -> . ID
    (44) factor_prime -> . cte
    (16) cte -> . CTE_INT
    (17) cte -> . CTE_FLOAT

    RPAREN          reduce using rule 70 (empty -> .)
    LPAREN          shift and go to state 63
    PLUS            shift and go to state 64
    MINUS           shift and go to state 66
    ID              shift and go to state 58
    CTE_INT         shift and go to state 68
    CTE_FLOAT       shift and go to state 69

    f_call_prime                   shift and go to state 70
    expression                     shift and go to state 71
    empty                          shift and go to state 72
    exp                            shift and go to state 60
    term                           shift and go to state 61
    factor                         shift and go to state 62
    factor_prime                   shift and go to state 65
    cte                            shift and go to state 67

state 52

    (61) condition -> IF LPAREN . expression RPAREN begin_if body else_condition SEMICOLON
    (11) expression -> . exp expression_prime
    (31) exp -> . term exp_prime
    (35) term -> . factor term_prime
    (39) factor -> . LPAREN expression RPAREN
    (40) factor -> . PLUS factor_prime
    (41) factor -> . MINUS factor_prime
    (42) factor -> . factor_prime
    (43) factor_prime -> . ID
    (44) factor_prime -> . cte
    (16) cte -> . CTE_INT
    (17) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 63
    PLUS            shift and go to state 64
    MINUS           shift and go to state 66
    ID              shift and go to state 58
    CTE_INT         shift and go to state 68
    CTE_FLOAT       shift and go to state 69

    expression                     shift and go to state 73
    exp                            shift and go to state 60
    term                           shift and go to state 61
    factor                         shift and go to state 62
    factor_prime                   shift and go to state 65
    cte                            shift and go to state 67

state 53

    (59) cycle -> WHILE LPAREN . expression RPAREN DO body SEMICOLON
    (11) expression -> . exp expression_prime
    (31) exp -> . term exp_prime
    (35) term -> . factor term_prime
    (39) factor -> . LPAREN expression RPAREN
    (40) factor -> . PLUS factor_prime
    (41) factor -> . MINUS factor_prime
    (42) factor -> . factor_prime
    (43) factor_prime -> . ID
    (44) factor_prime -> . cte
    (16) cte -> . CTE_INT
    (17) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 63
    PLUS            shift and go to state 64
    MINUS           shift and go to state 66
    ID              shift and go to state 58
    CTE_INT         shift and go to state 68
    CTE_FLOAT       shift and go to state 69

    expression                     shift and go to state 74
    exp                            shift and go to state 60
    term                           shift and go to state 61
    factor                         shift and go to state 62
    factor_prime                   shift and go to state 65
    cte                            shift and go to state 67

state 54

    (52) print -> PRINT LPAREN . print_prime RPAREN SEMICOLON
    (53) print_prime -> . expression more_print
    (54) print_prime -> . CTE_STRING more_print
    (11) expression -> . exp expression_prime
    (31) exp -> . term exp_prime
    (35) term -> . factor term_prime
    (39) factor -> . LPAREN expression RPAREN
    (40) factor -> . PLUS factor_prime
    (41) factor -> . MINUS factor_prime
    (42) factor -> . factor_prime
    (43) factor_prime -> . ID
    (44) factor_prime -> . cte
    (16) cte -> . CTE_INT
    (17) cte -> . CTE_FLOAT

    CTE_STRING      shift and go to state 77
    LPAREN          shift and go to state 63
    PLUS            shift and go to state 64
    MINUS           shift and go to state 66
    ID              shift and go to state 58
    CTE_INT         shift and go to state 68
    CTE_FLOAT       shift and go to state 69

    print_prime                    shift and go to state 75
    expression                     shift and go to state 76
    exp                            shift and go to state 60
    term                           shift and go to state 61
    factor                         shift and go to state 62
    factor_prime                   shift and go to state 65
    cte                            shift and go to state 67

state 55

    (20) funcs_prime -> ID COLON . type more_funcs
    (50) type -> . INT
    (51) type -> . FLOAT

    INT             shift and go to state 45
    FLOAT           shift and go to state 46

    type                           shift and go to state 78

state 56

    (18) funcs -> VOID ID LPAREN funcs_prime RPAREN . LBRACKET new_scope funcs_vars body RBRACKET SEMICOLON

    LBRACKET        shift and go to state 79


state 57

    (46) vars_prime -> ID id COLON type SEMICOLON . vars_prime
    (46) vars_prime -> . ID id COLON type SEMICOLON vars_prime
    (47) vars_prime -> . empty
    (70) empty -> .

    ID              shift and go to state 15
    VOID            reduce using rule 70 (empty -> .)
    MAIN            reduce using rule 70 (empty -> .)
    LBRACE          reduce using rule 70 (empty -> .)

    vars_prime                     shift and go to state 80
    empty                          shift and go to state 16

state 58

    (43) factor_prime -> ID .

    TIMES           reduce using rule 43 (factor_prime -> ID .)
    DIVIDE          reduce using rule 43 (factor_prime -> ID .)
    PLUS            reduce using rule 43 (factor_prime -> ID .)
    MINUS           reduce using rule 43 (factor_prime -> ID .)
    GREATER         reduce using rule 43 (factor_prime -> ID .)
    LESS            reduce using rule 43 (factor_prime -> ID .)
    NOT_EQUALS      reduce using rule 43 (factor_prime -> ID .)
    SEMICOLON       reduce using rule 43 (factor_prime -> ID .)
    COMMA           reduce using rule 43 (factor_prime -> ID .)
    RPAREN          reduce using rule 43 (factor_prime -> ID .)


state 59

    (10) assign -> ID EQUALS expression . SEMICOLON

    SEMICOLON       shift and go to state 81


state 60

    (11) expression -> exp . expression_prime
    (12) expression_prime -> . GREATER exp
    (13) expression_prime -> . LESS exp
    (14) expression_prime -> . NOT_EQUALS exp
    (15) expression_prime -> . empty
    (70) empty -> .

    GREATER         shift and go to state 83
    LESS            shift and go to state 84
    NOT_EQUALS      shift and go to state 85
    SEMICOLON       reduce using rule 70 (empty -> .)
    COMMA           reduce using rule 70 (empty -> .)
    RPAREN          reduce using rule 70 (empty -> .)

    expression_prime               shift and go to state 82
    empty                          shift and go to state 86

state 61

    (31) exp -> term . exp_prime
    (32) exp_prime -> . PLUS term exp_prime
    (33) exp_prime -> . MINUS term exp_prime
    (34) exp_prime -> . empty
    (70) empty -> .

    PLUS            shift and go to state 88
    MINUS           shift and go to state 89
    GREATER         reduce using rule 70 (empty -> .)
    LESS            reduce using rule 70 (empty -> .)
    NOT_EQUALS      reduce using rule 70 (empty -> .)
    SEMICOLON       reduce using rule 70 (empty -> .)
    COMMA           reduce using rule 70 (empty -> .)
    RPAREN          reduce using rule 70 (empty -> .)

    exp_prime                      shift and go to state 87
    empty                          shift and go to state 90

state 62

    (35) term -> factor . term_prime
    (36) term_prime -> . TIMES factor term_prime
    (37) term_prime -> . DIVIDE factor term_prime
    (38) term_prime -> . empty
    (70) empty -> .

    TIMES           shift and go to state 92
    DIVIDE          shift and go to state 93
    PLUS            reduce using rule 70 (empty -> .)
    MINUS           reduce using rule 70 (empty -> .)
    GREATER         reduce using rule 70 (empty -> .)
    LESS            reduce using rule 70 (empty -> .)
    NOT_EQUALS      reduce using rule 70 (empty -> .)
    SEMICOLON       reduce using rule 70 (empty -> .)
    COMMA           reduce using rule 70 (empty -> .)
    RPAREN          reduce using rule 70 (empty -> .)

    term_prime                     shift and go to state 91
    empty                          shift and go to state 94

state 63

    (39) factor -> LPAREN . expression RPAREN
    (11) expression -> . exp expression_prime
    (31) exp -> . term exp_prime
    (35) term -> . factor term_prime
    (39) factor -> . LPAREN expression RPAREN
    (40) factor -> . PLUS factor_prime
    (41) factor -> . MINUS factor_prime
    (42) factor -> . factor_prime
    (43) factor_prime -> . ID
    (44) factor_prime -> . cte
    (16) cte -> . CTE_INT
    (17) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 63
    PLUS            shift and go to state 64
    MINUS           shift and go to state 66
    ID              shift and go to state 58
    CTE_INT         shift and go to state 68
    CTE_FLOAT       shift and go to state 69

    expression                     shift and go to state 95
    exp                            shift and go to state 60
    term                           shift and go to state 61
    factor                         shift and go to state 62
    factor_prime                   shift and go to state 65
    cte                            shift and go to state 67

state 64

    (40) factor -> PLUS . factor_prime
    (43) factor_prime -> . ID
    (44) factor_prime -> . cte
    (16) cte -> . CTE_INT
    (17) cte -> . CTE_FLOAT

    ID              shift and go to state 58
    CTE_INT         shift and go to state 68
    CTE_FLOAT       shift and go to state 69

    factor_prime                   shift and go to state 96
    cte                            shift and go to state 67

state 65

    (42) factor -> factor_prime .

    TIMES           reduce using rule 42 (factor -> factor_prime .)
    DIVIDE          reduce using rule 42 (factor -> factor_prime .)
    PLUS            reduce using rule 42 (factor -> factor_prime .)
    MINUS           reduce using rule 42 (factor -> factor_prime .)
    GREATER         reduce using rule 42 (factor -> factor_prime .)
    LESS            reduce using rule 42 (factor -> factor_prime .)
    NOT_EQUALS      reduce using rule 42 (factor -> factor_prime .)
    SEMICOLON       reduce using rule 42 (factor -> factor_prime .)
    COMMA           reduce using rule 42 (factor -> factor_prime .)
    RPAREN          reduce using rule 42 (factor -> factor_prime .)


state 66

    (41) factor -> MINUS . factor_prime
    (43) factor_prime -> . ID
    (44) factor_prime -> . cte
    (16) cte -> . CTE_INT
    (17) cte -> . CTE_FLOAT

    ID              shift and go to state 58
    CTE_INT         shift and go to state 68
    CTE_FLOAT       shift and go to state 69

    factor_prime                   shift and go to state 97
    cte                            shift and go to state 67

state 67

    (44) factor_prime -> cte .

    TIMES           reduce using rule 44 (factor_prime -> cte .)
    DIVIDE          reduce using rule 44 (factor_prime -> cte .)
    PLUS            reduce using rule 44 (factor_prime -> cte .)
    MINUS           reduce using rule 44 (factor_prime -> cte .)
    GREATER         reduce using rule 44 (factor_prime -> cte .)
    LESS            reduce using rule 44 (factor_prime -> cte .)
    NOT_EQUALS      reduce using rule 44 (factor_prime -> cte .)
    SEMICOLON       reduce using rule 44 (factor_prime -> cte .)
    COMMA           reduce using rule 44 (factor_prime -> cte .)
    RPAREN          reduce using rule 44 (factor_prime -> cte .)


state 68

    (16) cte -> CTE_INT .

    TIMES           reduce using rule 16 (cte -> CTE_INT .)
    DIVIDE          reduce using rule 16 (cte -> CTE_INT .)
    PLUS            reduce using rule 16 (cte -> CTE_INT .)
    MINUS           reduce using rule 16 (cte -> CTE_INT .)
    GREATER         reduce using rule 16 (cte -> CTE_INT .)
    LESS            reduce using rule 16 (cte -> CTE_INT .)
    NOT_EQUALS      reduce using rule 16 (cte -> CTE_INT .)
    SEMICOLON       reduce using rule 16 (cte -> CTE_INT .)
    COMMA           reduce using rule 16 (cte -> CTE_INT .)
    RPAREN          reduce using rule 16 (cte -> CTE_INT .)


state 69

    (17) cte -> CTE_FLOAT .

    TIMES           reduce using rule 17 (cte -> CTE_FLOAT .)
    DIVIDE          reduce using rule 17 (cte -> CTE_FLOAT .)
    PLUS            reduce using rule 17 (cte -> CTE_FLOAT .)
    MINUS           reduce using rule 17 (cte -> CTE_FLOAT .)
    GREATER         reduce using rule 17 (cte -> CTE_FLOAT .)
    LESS            reduce using rule 17 (cte -> CTE_FLOAT .)
    NOT_EQUALS      reduce using rule 17 (cte -> CTE_FLOAT .)
    SEMICOLON       reduce using rule 17 (cte -> CTE_FLOAT .)
    COMMA           reduce using rule 17 (cte -> CTE_FLOAT .)
    RPAREN          reduce using rule 17 (cte -> CTE_FLOAT .)


state 70

    (65) f_call -> ID LPAREN f_call_prime . RPAREN SEMICOLON

    RPAREN          shift and go to state 98


state 71

    (66) f_call_prime -> expression . more_f_call
    (68) more_f_call -> . COMMA expression more_f_call
    (69) more_f_call -> . empty
    (70) empty -> .

    COMMA           shift and go to state 100
    RPAREN          reduce using rule 70 (empty -> .)

    more_f_call                    shift and go to state 99
    empty                          shift and go to state 101

state 72

    (67) f_call_prime -> empty .

    RPAREN          reduce using rule 67 (f_call_prime -> empty .)


state 73

    (61) condition -> IF LPAREN expression . RPAREN begin_if body else_condition SEMICOLON

    RPAREN          shift and go to state 102


state 74

    (59) cycle -> WHILE LPAREN expression . RPAREN DO body SEMICOLON

    RPAREN          shift and go to state 103


state 75

    (52) print -> PRINT LPAREN print_prime . RPAREN SEMICOLON

    RPAREN          shift and go to state 104


state 76

    (53) print_prime -> expression . more_print
    (55) more_print -> . COMMA more_print_prime more_print
    (56) more_print -> . empty
    (70) empty -> .

    COMMA           shift and go to state 106
    RPAREN          reduce using rule 70 (empty -> .)

    more_print                     shift and go to state 105
    empty                          shift and go to state 107

state 77

    (54) print_prime -> CTE_STRING . more_print
    (55) more_print -> . COMMA more_print_prime more_print
    (56) more_print -> . empty
    (70) empty -> .

    COMMA           shift and go to state 106
    RPAREN          reduce using rule 70 (empty -> .)

    more_print                     shift and go to state 108
    empty                          shift and go to state 107

state 78

    (20) funcs_prime -> ID COLON type . more_funcs
    (22) more_funcs -> . COMMA ID COLON type more_funcs
    (23) more_funcs -> . empty
    (70) empty -> .

    COMMA           shift and go to state 110
    RPAREN          reduce using rule 70 (empty -> .)

    more_funcs                     shift and go to state 109
    empty                          shift and go to state 111

state 79

    (18) funcs -> VOID ID LPAREN funcs_prime RPAREN LBRACKET . new_scope funcs_vars body RBRACKET SEMICOLON
    (19) new_scope -> .

    VAR             reduce using rule 19 (new_scope -> .)
    LBRACE          reduce using rule 19 (new_scope -> .)

    new_scope                      shift and go to state 112

state 80

    (46) vars_prime -> ID id COLON type SEMICOLON vars_prime .

    VOID            reduce using rule 46 (vars_prime -> ID id COLON type SEMICOLON vars_prime .)
    MAIN            reduce using rule 46 (vars_prime -> ID id COLON type SEMICOLON vars_prime .)
    LBRACE          reduce using rule 46 (vars_prime -> ID id COLON type SEMICOLON vars_prime .)


state 81

    (10) assign -> ID EQUALS expression SEMICOLON .

    ID              reduce using rule 10 (assign -> ID EQUALS expression SEMICOLON .)
    IF              reduce using rule 10 (assign -> ID EQUALS expression SEMICOLON .)
    WHILE           reduce using rule 10 (assign -> ID EQUALS expression SEMICOLON .)
    PRINT           reduce using rule 10 (assign -> ID EQUALS expression SEMICOLON .)
    RBRACE          reduce using rule 10 (assign -> ID EQUALS expression SEMICOLON .)


state 82

    (11) expression -> exp expression_prime .

    SEMICOLON       reduce using rule 11 (expression -> exp expression_prime .)
    COMMA           reduce using rule 11 (expression -> exp expression_prime .)
    RPAREN          reduce using rule 11 (expression -> exp expression_prime .)


state 83

    (12) expression_prime -> GREATER . exp
    (31) exp -> . term exp_prime
    (35) term -> . factor term_prime
    (39) factor -> . LPAREN expression RPAREN
    (40) factor -> . PLUS factor_prime
    (41) factor -> . MINUS factor_prime
    (42) factor -> . factor_prime
    (43) factor_prime -> . ID
    (44) factor_prime -> . cte
    (16) cte -> . CTE_INT
    (17) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 63
    PLUS            shift and go to state 64
    MINUS           shift and go to state 66
    ID              shift and go to state 58
    CTE_INT         shift and go to state 68
    CTE_FLOAT       shift and go to state 69

    exp                            shift and go to state 113
    term                           shift and go to state 61
    factor                         shift and go to state 62
    factor_prime                   shift and go to state 65
    cte                            shift and go to state 67

state 84

    (13) expression_prime -> LESS . exp
    (31) exp -> . term exp_prime
    (35) term -> . factor term_prime
    (39) factor -> . LPAREN expression RPAREN
    (40) factor -> . PLUS factor_prime
    (41) factor -> . MINUS factor_prime
    (42) factor -> . factor_prime
    (43) factor_prime -> . ID
    (44) factor_prime -> . cte
    (16) cte -> . CTE_INT
    (17) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 63
    PLUS            shift and go to state 64
    MINUS           shift and go to state 66
    ID              shift and go to state 58
    CTE_INT         shift and go to state 68
    CTE_FLOAT       shift and go to state 69

    exp                            shift and go to state 114
    term                           shift and go to state 61
    factor                         shift and go to state 62
    factor_prime                   shift and go to state 65
    cte                            shift and go to state 67

state 85

    (14) expression_prime -> NOT_EQUALS . exp
    (31) exp -> . term exp_prime
    (35) term -> . factor term_prime
    (39) factor -> . LPAREN expression RPAREN
    (40) factor -> . PLUS factor_prime
    (41) factor -> . MINUS factor_prime
    (42) factor -> . factor_prime
    (43) factor_prime -> . ID
    (44) factor_prime -> . cte
    (16) cte -> . CTE_INT
    (17) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 63
    PLUS            shift and go to state 64
    MINUS           shift and go to state 66
    ID              shift and go to state 58
    CTE_INT         shift and go to state 68
    CTE_FLOAT       shift and go to state 69

    exp                            shift and go to state 115
    term                           shift and go to state 61
    factor                         shift and go to state 62
    factor_prime                   shift and go to state 65
    cte                            shift and go to state 67

state 86

    (15) expression_prime -> empty .

    SEMICOLON       reduce using rule 15 (expression_prime -> empty .)
    COMMA           reduce using rule 15 (expression_prime -> empty .)
    RPAREN          reduce using rule 15 (expression_prime -> empty .)


state 87

    (31) exp -> term exp_prime .

    GREATER         reduce using rule 31 (exp -> term exp_prime .)
    LESS            reduce using rule 31 (exp -> term exp_prime .)
    NOT_EQUALS      reduce using rule 31 (exp -> term exp_prime .)
    SEMICOLON       reduce using rule 31 (exp -> term exp_prime .)
    COMMA           reduce using rule 31 (exp -> term exp_prime .)
    RPAREN          reduce using rule 31 (exp -> term exp_prime .)


state 88

    (32) exp_prime -> PLUS . term exp_prime
    (35) term -> . factor term_prime
    (39) factor -> . LPAREN expression RPAREN
    (40) factor -> . PLUS factor_prime
    (41) factor -> . MINUS factor_prime
    (42) factor -> . factor_prime
    (43) factor_prime -> . ID
    (44) factor_prime -> . cte
    (16) cte -> . CTE_INT
    (17) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 63
    PLUS            shift and go to state 64
    MINUS           shift and go to state 66
    ID              shift and go to state 58
    CTE_INT         shift and go to state 68
    CTE_FLOAT       shift and go to state 69

    term                           shift and go to state 116
    factor                         shift and go to state 62
    factor_prime                   shift and go to state 65
    cte                            shift and go to state 67

state 89

    (33) exp_prime -> MINUS . term exp_prime
    (35) term -> . factor term_prime
    (39) factor -> . LPAREN expression RPAREN
    (40) factor -> . PLUS factor_prime
    (41) factor -> . MINUS factor_prime
    (42) factor -> . factor_prime
    (43) factor_prime -> . ID
    (44) factor_prime -> . cte
    (16) cte -> . CTE_INT
    (17) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 63
    PLUS            shift and go to state 64
    MINUS           shift and go to state 66
    ID              shift and go to state 58
    CTE_INT         shift and go to state 68
    CTE_FLOAT       shift and go to state 69

    term                           shift and go to state 117
    factor                         shift and go to state 62
    factor_prime                   shift and go to state 65
    cte                            shift and go to state 67

state 90

    (34) exp_prime -> empty .

    GREATER         reduce using rule 34 (exp_prime -> empty .)
    LESS            reduce using rule 34 (exp_prime -> empty .)
    NOT_EQUALS      reduce using rule 34 (exp_prime -> empty .)
    SEMICOLON       reduce using rule 34 (exp_prime -> empty .)
    COMMA           reduce using rule 34 (exp_prime -> empty .)
    RPAREN          reduce using rule 34 (exp_prime -> empty .)


state 91

    (35) term -> factor term_prime .

    PLUS            reduce using rule 35 (term -> factor term_prime .)
    MINUS           reduce using rule 35 (term -> factor term_prime .)
    GREATER         reduce using rule 35 (term -> factor term_prime .)
    LESS            reduce using rule 35 (term -> factor term_prime .)
    NOT_EQUALS      reduce using rule 35 (term -> factor term_prime .)
    SEMICOLON       reduce using rule 35 (term -> factor term_prime .)
    COMMA           reduce using rule 35 (term -> factor term_prime .)
    RPAREN          reduce using rule 35 (term -> factor term_prime .)


state 92

    (36) term_prime -> TIMES . factor term_prime
    (39) factor -> . LPAREN expression RPAREN
    (40) factor -> . PLUS factor_prime
    (41) factor -> . MINUS factor_prime
    (42) factor -> . factor_prime
    (43) factor_prime -> . ID
    (44) factor_prime -> . cte
    (16) cte -> . CTE_INT
    (17) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 63
    PLUS            shift and go to state 64
    MINUS           shift and go to state 66
    ID              shift and go to state 58
    CTE_INT         shift and go to state 68
    CTE_FLOAT       shift and go to state 69

    factor                         shift and go to state 118
    factor_prime                   shift and go to state 65
    cte                            shift and go to state 67

state 93

    (37) term_prime -> DIVIDE . factor term_prime
    (39) factor -> . LPAREN expression RPAREN
    (40) factor -> . PLUS factor_prime
    (41) factor -> . MINUS factor_prime
    (42) factor -> . factor_prime
    (43) factor_prime -> . ID
    (44) factor_prime -> . cte
    (16) cte -> . CTE_INT
    (17) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 63
    PLUS            shift and go to state 64
    MINUS           shift and go to state 66
    ID              shift and go to state 58
    CTE_INT         shift and go to state 68
    CTE_FLOAT       shift and go to state 69

    factor                         shift and go to state 119
    factor_prime                   shift and go to state 65
    cte                            shift and go to state 67

state 94

    (38) term_prime -> empty .

    PLUS            reduce using rule 38 (term_prime -> empty .)
    MINUS           reduce using rule 38 (term_prime -> empty .)
    GREATER         reduce using rule 38 (term_prime -> empty .)
    LESS            reduce using rule 38 (term_prime -> empty .)
    NOT_EQUALS      reduce using rule 38 (term_prime -> empty .)
    SEMICOLON       reduce using rule 38 (term_prime -> empty .)
    COMMA           reduce using rule 38 (term_prime -> empty .)
    RPAREN          reduce using rule 38 (term_prime -> empty .)


state 95

    (39) factor -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 120


state 96

    (40) factor -> PLUS factor_prime .

    TIMES           reduce using rule 40 (factor -> PLUS factor_prime .)
    DIVIDE          reduce using rule 40 (factor -> PLUS factor_prime .)
    PLUS            reduce using rule 40 (factor -> PLUS factor_prime .)
    MINUS           reduce using rule 40 (factor -> PLUS factor_prime .)
    GREATER         reduce using rule 40 (factor -> PLUS factor_prime .)
    LESS            reduce using rule 40 (factor -> PLUS factor_prime .)
    NOT_EQUALS      reduce using rule 40 (factor -> PLUS factor_prime .)
    SEMICOLON       reduce using rule 40 (factor -> PLUS factor_prime .)
    COMMA           reduce using rule 40 (factor -> PLUS factor_prime .)
    RPAREN          reduce using rule 40 (factor -> PLUS factor_prime .)


state 97

    (41) factor -> MINUS factor_prime .

    TIMES           reduce using rule 41 (factor -> MINUS factor_prime .)
    DIVIDE          reduce using rule 41 (factor -> MINUS factor_prime .)
    PLUS            reduce using rule 41 (factor -> MINUS factor_prime .)
    MINUS           reduce using rule 41 (factor -> MINUS factor_prime .)
    GREATER         reduce using rule 41 (factor -> MINUS factor_prime .)
    LESS            reduce using rule 41 (factor -> MINUS factor_prime .)
    NOT_EQUALS      reduce using rule 41 (factor -> MINUS factor_prime .)
    SEMICOLON       reduce using rule 41 (factor -> MINUS factor_prime .)
    COMMA           reduce using rule 41 (factor -> MINUS factor_prime .)
    RPAREN          reduce using rule 41 (factor -> MINUS factor_prime .)


state 98

    (65) f_call -> ID LPAREN f_call_prime RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 121


state 99

    (66) f_call_prime -> expression more_f_call .

    RPAREN          reduce using rule 66 (f_call_prime -> expression more_f_call .)


state 100

    (68) more_f_call -> COMMA . expression more_f_call
    (11) expression -> . exp expression_prime
    (31) exp -> . term exp_prime
    (35) term -> . factor term_prime
    (39) factor -> . LPAREN expression RPAREN
    (40) factor -> . PLUS factor_prime
    (41) factor -> . MINUS factor_prime
    (42) factor -> . factor_prime
    (43) factor_prime -> . ID
    (44) factor_prime -> . cte
    (16) cte -> . CTE_INT
    (17) cte -> . CTE_FLOAT

    LPAREN          shift and go to state 63
    PLUS            shift and go to state 64
    MINUS           shift and go to state 66
    ID              shift and go to state 58
    CTE_INT         shift and go to state 68
    CTE_FLOAT       shift and go to state 69

    expression                     shift and go to state 122
    exp                            shift and go to state 60
    term                           shift and go to state 61
    factor                         shift and go to state 62
    factor_prime                   shift and go to state 65
    cte                            shift and go to state 67

state 101

    (69) more_f_call -> empty .

    RPAREN          reduce using rule 69 (more_f_call -> empty .)


state 102

    (61) condition -> IF LPAREN expression RPAREN . begin_if body else_condition SEMICOLON
    (60) begin_if -> .

    LBRACE          reduce using rule 60 (begin_if -> .)

    begin_if                       shift and go to state 123

state 103

    (59) cycle -> WHILE LPAREN expression RPAREN . DO body SEMICOLON

    DO              shift and go to state 124


state 104

    (52) print -> PRINT LPAREN print_prime RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 125


state 105

    (53) print_prime -> expression more_print .

    RPAREN          reduce using rule 53 (print_prime -> expression more_print .)


state 106

    (55) more_print -> COMMA . more_print_prime more_print
    (57) more_print_prime -> . expression
    (58) more_print_prime -> . CTE_STRING
    (11) expression -> . exp expression_prime
    (31) exp -> . term exp_prime
    (35) term -> . factor term_prime
    (39) factor -> . LPAREN expression RPAREN
    (40) factor -> . PLUS factor_prime
    (41) factor -> . MINUS factor_prime
    (42) factor -> . factor_prime
    (43) factor_prime -> . ID
    (44) factor_prime -> . cte
    (16) cte -> . CTE_INT
    (17) cte -> . CTE_FLOAT

    CTE_STRING      shift and go to state 128
    LPAREN          shift and go to state 63
    PLUS            shift and go to state 64
    MINUS           shift and go to state 66
    ID              shift and go to state 58
    CTE_INT         shift and go to state 68
    CTE_FLOAT       shift and go to state 69

    more_print_prime               shift and go to state 126
    expression                     shift and go to state 127
    exp                            shift and go to state 60
    term                           shift and go to state 61
    factor                         shift and go to state 62
    factor_prime                   shift and go to state 65
    cte                            shift and go to state 67

state 107

    (56) more_print -> empty .

    RPAREN          reduce using rule 56 (more_print -> empty .)


state 108

    (54) print_prime -> CTE_STRING more_print .

    RPAREN          reduce using rule 54 (print_prime -> CTE_STRING more_print .)


state 109

    (20) funcs_prime -> ID COLON type more_funcs .

    RPAREN          reduce using rule 20 (funcs_prime -> ID COLON type more_funcs .)


state 110

    (22) more_funcs -> COMMA . ID COLON type more_funcs

    ID              shift and go to state 129


state 111

    (23) more_funcs -> empty .

    RPAREN          reduce using rule 23 (more_funcs -> empty .)


state 112

    (18) funcs -> VOID ID LPAREN funcs_prime RPAREN LBRACKET new_scope . funcs_vars body RBRACKET SEMICOLON
    (24) funcs_vars -> . vars
    (25) funcs_vars -> . empty
    (45) vars -> . VAR vars_prime
    (70) empty -> .

    VAR             shift and go to state 9
    LBRACE          reduce using rule 70 (empty -> .)

    funcs_vars                     shift and go to state 130
    vars                           shift and go to state 131
    empty                          shift and go to state 132

state 113

    (12) expression_prime -> GREATER exp .

    SEMICOLON       reduce using rule 12 (expression_prime -> GREATER exp .)
    COMMA           reduce using rule 12 (expression_prime -> GREATER exp .)
    RPAREN          reduce using rule 12 (expression_prime -> GREATER exp .)


state 114

    (13) expression_prime -> LESS exp .

    SEMICOLON       reduce using rule 13 (expression_prime -> LESS exp .)
    COMMA           reduce using rule 13 (expression_prime -> LESS exp .)
    RPAREN          reduce using rule 13 (expression_prime -> LESS exp .)


state 115

    (14) expression_prime -> NOT_EQUALS exp .

    SEMICOLON       reduce using rule 14 (expression_prime -> NOT_EQUALS exp .)
    COMMA           reduce using rule 14 (expression_prime -> NOT_EQUALS exp .)
    RPAREN          reduce using rule 14 (expression_prime -> NOT_EQUALS exp .)


state 116

    (32) exp_prime -> PLUS term . exp_prime
    (32) exp_prime -> . PLUS term exp_prime
    (33) exp_prime -> . MINUS term exp_prime
    (34) exp_prime -> . empty
    (70) empty -> .

    PLUS            shift and go to state 88
    MINUS           shift and go to state 89
    GREATER         reduce using rule 70 (empty -> .)
    LESS            reduce using rule 70 (empty -> .)
    NOT_EQUALS      reduce using rule 70 (empty -> .)
    SEMICOLON       reduce using rule 70 (empty -> .)
    COMMA           reduce using rule 70 (empty -> .)
    RPAREN          reduce using rule 70 (empty -> .)

    exp_prime                      shift and go to state 133
    empty                          shift and go to state 90

state 117

    (33) exp_prime -> MINUS term . exp_prime
    (32) exp_prime -> . PLUS term exp_prime
    (33) exp_prime -> . MINUS term exp_prime
    (34) exp_prime -> . empty
    (70) empty -> .

    PLUS            shift and go to state 88
    MINUS           shift and go to state 89
    GREATER         reduce using rule 70 (empty -> .)
    LESS            reduce using rule 70 (empty -> .)
    NOT_EQUALS      reduce using rule 70 (empty -> .)
    SEMICOLON       reduce using rule 70 (empty -> .)
    COMMA           reduce using rule 70 (empty -> .)
    RPAREN          reduce using rule 70 (empty -> .)

    exp_prime                      shift and go to state 134
    empty                          shift and go to state 90

state 118

    (36) term_prime -> TIMES factor . term_prime
    (36) term_prime -> . TIMES factor term_prime
    (37) term_prime -> . DIVIDE factor term_prime
    (38) term_prime -> . empty
    (70) empty -> .

    TIMES           shift and go to state 92
    DIVIDE          shift and go to state 93
    PLUS            reduce using rule 70 (empty -> .)
    MINUS           reduce using rule 70 (empty -> .)
    GREATER         reduce using rule 70 (empty -> .)
    LESS            reduce using rule 70 (empty -> .)
    NOT_EQUALS      reduce using rule 70 (empty -> .)
    SEMICOLON       reduce using rule 70 (empty -> .)
    COMMA           reduce using rule 70 (empty -> .)
    RPAREN          reduce using rule 70 (empty -> .)

    term_prime                     shift and go to state 135
    empty                          shift and go to state 94

state 119

    (37) term_prime -> DIVIDE factor . term_prime
    (36) term_prime -> . TIMES factor term_prime
    (37) term_prime -> . DIVIDE factor term_prime
    (38) term_prime -> . empty
    (70) empty -> .

    TIMES           shift and go to state 92
    DIVIDE          shift and go to state 93
    PLUS            reduce using rule 70 (empty -> .)
    MINUS           reduce using rule 70 (empty -> .)
    GREATER         reduce using rule 70 (empty -> .)
    LESS            reduce using rule 70 (empty -> .)
    NOT_EQUALS      reduce using rule 70 (empty -> .)
    SEMICOLON       reduce using rule 70 (empty -> .)
    COMMA           reduce using rule 70 (empty -> .)
    RPAREN          reduce using rule 70 (empty -> .)

    term_prime                     shift and go to state 136
    empty                          shift and go to state 94

state 120

    (39) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 39 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 39 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 39 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 39 (factor -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 39 (factor -> LPAREN expression RPAREN .)
    LESS            reduce using rule 39 (factor -> LPAREN expression RPAREN .)
    NOT_EQUALS      reduce using rule 39 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 39 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 39 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 39 (factor -> LPAREN expression RPAREN .)


state 121

    (65) f_call -> ID LPAREN f_call_prime RPAREN SEMICOLON .

    ID              reduce using rule 65 (f_call -> ID LPAREN f_call_prime RPAREN SEMICOLON .)
    IF              reduce using rule 65 (f_call -> ID LPAREN f_call_prime RPAREN SEMICOLON .)
    WHILE           reduce using rule 65 (f_call -> ID LPAREN f_call_prime RPAREN SEMICOLON .)
    PRINT           reduce using rule 65 (f_call -> ID LPAREN f_call_prime RPAREN SEMICOLON .)
    RBRACE          reduce using rule 65 (f_call -> ID LPAREN f_call_prime RPAREN SEMICOLON .)


state 122

    (68) more_f_call -> COMMA expression . more_f_call
    (68) more_f_call -> . COMMA expression more_f_call
    (69) more_f_call -> . empty
    (70) empty -> .

    COMMA           shift and go to state 100
    RPAREN          reduce using rule 70 (empty -> .)

    more_f_call                    shift and go to state 137
    empty                          shift and go to state 101

state 123

    (61) condition -> IF LPAREN expression RPAREN begin_if . body else_condition SEMICOLON
    (7) body -> . LBRACE body_prime RBRACE

    LBRACE          shift and go to state 24

    body                           shift and go to state 138

state 124

    (59) cycle -> WHILE LPAREN expression RPAREN DO . body SEMICOLON
    (7) body -> . LBRACE body_prime RBRACE

    LBRACE          shift and go to state 24

    body                           shift and go to state 139

state 125

    (52) print -> PRINT LPAREN print_prime RPAREN SEMICOLON .

    ID              reduce using rule 52 (print -> PRINT LPAREN print_prime RPAREN SEMICOLON .)
    IF              reduce using rule 52 (print -> PRINT LPAREN print_prime RPAREN SEMICOLON .)
    WHILE           reduce using rule 52 (print -> PRINT LPAREN print_prime RPAREN SEMICOLON .)
    PRINT           reduce using rule 52 (print -> PRINT LPAREN print_prime RPAREN SEMICOLON .)
    RBRACE          reduce using rule 52 (print -> PRINT LPAREN print_prime RPAREN SEMICOLON .)


state 126

    (55) more_print -> COMMA more_print_prime . more_print
    (55) more_print -> . COMMA more_print_prime more_print
    (56) more_print -> . empty
    (70) empty -> .

    COMMA           shift and go to state 106
    RPAREN          reduce using rule 70 (empty -> .)

    more_print                     shift and go to state 140
    empty                          shift and go to state 107

state 127

    (57) more_print_prime -> expression .

    COMMA           reduce using rule 57 (more_print_prime -> expression .)
    RPAREN          reduce using rule 57 (more_print_prime -> expression .)


state 128

    (58) more_print_prime -> CTE_STRING .

    COMMA           reduce using rule 58 (more_print_prime -> CTE_STRING .)
    RPAREN          reduce using rule 58 (more_print_prime -> CTE_STRING .)


state 129

    (22) more_funcs -> COMMA ID . COLON type more_funcs

    COLON           shift and go to state 141


state 130

    (18) funcs -> VOID ID LPAREN funcs_prime RPAREN LBRACKET new_scope funcs_vars . body RBRACKET SEMICOLON
    (7) body -> . LBRACE body_prime RBRACE

    LBRACE          shift and go to state 24

    body                           shift and go to state 142

state 131

    (24) funcs_vars -> vars .

    LBRACE          reduce using rule 24 (funcs_vars -> vars .)


state 132

    (25) funcs_vars -> empty .

    LBRACE          reduce using rule 25 (funcs_vars -> empty .)


state 133

    (32) exp_prime -> PLUS term exp_prime .

    GREATER         reduce using rule 32 (exp_prime -> PLUS term exp_prime .)
    LESS            reduce using rule 32 (exp_prime -> PLUS term exp_prime .)
    NOT_EQUALS      reduce using rule 32 (exp_prime -> PLUS term exp_prime .)
    SEMICOLON       reduce using rule 32 (exp_prime -> PLUS term exp_prime .)
    COMMA           reduce using rule 32 (exp_prime -> PLUS term exp_prime .)
    RPAREN          reduce using rule 32 (exp_prime -> PLUS term exp_prime .)


state 134

    (33) exp_prime -> MINUS term exp_prime .

    GREATER         reduce using rule 33 (exp_prime -> MINUS term exp_prime .)
    LESS            reduce using rule 33 (exp_prime -> MINUS term exp_prime .)
    NOT_EQUALS      reduce using rule 33 (exp_prime -> MINUS term exp_prime .)
    SEMICOLON       reduce using rule 33 (exp_prime -> MINUS term exp_prime .)
    COMMA           reduce using rule 33 (exp_prime -> MINUS term exp_prime .)
    RPAREN          reduce using rule 33 (exp_prime -> MINUS term exp_prime .)


state 135

    (36) term_prime -> TIMES factor term_prime .

    PLUS            reduce using rule 36 (term_prime -> TIMES factor term_prime .)
    MINUS           reduce using rule 36 (term_prime -> TIMES factor term_prime .)
    GREATER         reduce using rule 36 (term_prime -> TIMES factor term_prime .)
    LESS            reduce using rule 36 (term_prime -> TIMES factor term_prime .)
    NOT_EQUALS      reduce using rule 36 (term_prime -> TIMES factor term_prime .)
    SEMICOLON       reduce using rule 36 (term_prime -> TIMES factor term_prime .)
    COMMA           reduce using rule 36 (term_prime -> TIMES factor term_prime .)
    RPAREN          reduce using rule 36 (term_prime -> TIMES factor term_prime .)


state 136

    (37) term_prime -> DIVIDE factor term_prime .

    PLUS            reduce using rule 37 (term_prime -> DIVIDE factor term_prime .)
    MINUS           reduce using rule 37 (term_prime -> DIVIDE factor term_prime .)
    GREATER         reduce using rule 37 (term_prime -> DIVIDE factor term_prime .)
    LESS            reduce using rule 37 (term_prime -> DIVIDE factor term_prime .)
    NOT_EQUALS      reduce using rule 37 (term_prime -> DIVIDE factor term_prime .)
    SEMICOLON       reduce using rule 37 (term_prime -> DIVIDE factor term_prime .)
    COMMA           reduce using rule 37 (term_prime -> DIVIDE factor term_prime .)
    RPAREN          reduce using rule 37 (term_prime -> DIVIDE factor term_prime .)


state 137

    (68) more_f_call -> COMMA expression more_f_call .

    RPAREN          reduce using rule 68 (more_f_call -> COMMA expression more_f_call .)


state 138

    (61) condition -> IF LPAREN expression RPAREN begin_if body . else_condition SEMICOLON
    (63) else_condition -> . ELSE begin_else body
    (64) else_condition -> . empty
    (70) empty -> .

    ELSE            shift and go to state 144
    SEMICOLON       reduce using rule 70 (empty -> .)

    else_condition                 shift and go to state 143
    empty                          shift and go to state 145

state 139

    (59) cycle -> WHILE LPAREN expression RPAREN DO body . SEMICOLON

    SEMICOLON       shift and go to state 146


state 140

    (55) more_print -> COMMA more_print_prime more_print .

    RPAREN          reduce using rule 55 (more_print -> COMMA more_print_prime more_print .)


state 141

    (22) more_funcs -> COMMA ID COLON . type more_funcs
    (50) type -> . INT
    (51) type -> . FLOAT

    INT             shift and go to state 45
    FLOAT           shift and go to state 46

    type                           shift and go to state 147

state 142

    (18) funcs -> VOID ID LPAREN funcs_prime RPAREN LBRACKET new_scope funcs_vars body . RBRACKET SEMICOLON

    RBRACKET        shift and go to state 148


state 143

    (61) condition -> IF LPAREN expression RPAREN begin_if body else_condition . SEMICOLON

    SEMICOLON       shift and go to state 149


state 144

    (63) else_condition -> ELSE . begin_else body
    (62) begin_else -> .

    LBRACE          reduce using rule 62 (begin_else -> .)

    begin_else                     shift and go to state 150

state 145

    (64) else_condition -> empty .

    SEMICOLON       reduce using rule 64 (else_condition -> empty .)


state 146

    (59) cycle -> WHILE LPAREN expression RPAREN DO body SEMICOLON .

    ID              reduce using rule 59 (cycle -> WHILE LPAREN expression RPAREN DO body SEMICOLON .)
    IF              reduce using rule 59 (cycle -> WHILE LPAREN expression RPAREN DO body SEMICOLON .)
    WHILE           reduce using rule 59 (cycle -> WHILE LPAREN expression RPAREN DO body SEMICOLON .)
    PRINT           reduce using rule 59 (cycle -> WHILE LPAREN expression RPAREN DO body SEMICOLON .)
    RBRACE          reduce using rule 59 (cycle -> WHILE LPAREN expression RPAREN DO body SEMICOLON .)


state 147

    (22) more_funcs -> COMMA ID COLON type . more_funcs
    (22) more_funcs -> . COMMA ID COLON type more_funcs
    (23) more_funcs -> . empty
    (70) empty -> .

    COMMA           shift and go to state 110
    RPAREN          reduce using rule 70 (empty -> .)

    more_funcs                     shift and go to state 151
    empty                          shift and go to state 111

state 148

    (18) funcs -> VOID ID LPAREN funcs_prime RPAREN LBRACKET new_scope funcs_vars body RBRACKET . SEMICOLON

    SEMICOLON       shift and go to state 152


state 149

    (61) condition -> IF LPAREN expression RPAREN begin_if body else_condition SEMICOLON .

    ID              reduce using rule 61 (condition -> IF LPAREN expression RPAREN begin_if body else_condition SEMICOLON .)
    IF              reduce using rule 61 (condition -> IF LPAREN expression RPAREN begin_if body else_condition SEMICOLON .)
    WHILE           reduce using rule 61 (condition -> IF LPAREN expression RPAREN begin_if body else_condition SEMICOLON .)
    PRINT           reduce using rule 61 (condition -> IF LPAREN expression RPAREN begin_if body else_condition SEMICOLON .)
    RBRACE          reduce using rule 61 (condition -> IF LPAREN expression RPAREN begin_if body else_condition SEMICOLON .)


state 150

    (63) else_condition -> ELSE begin_else . body
    (7) body -> . LBRACE body_prime RBRACE

    LBRACE          shift and go to state 24

    body                           shift and go to state 153

state 151

    (22) more_funcs -> COMMA ID COLON type more_funcs .

    RPAREN          reduce using rule 22 (more_funcs -> COMMA ID COLON type more_funcs .)


state 152

    (18) funcs -> VOID ID LPAREN funcs_prime RPAREN LBRACKET new_scope funcs_vars body RBRACKET SEMICOLON .

    VOID            reduce using rule 18 (funcs -> VOID ID LPAREN funcs_prime RPAREN LBRACKET new_scope funcs_vars body RBRACKET SEMICOLON .)
    MAIN            reduce using rule 18 (funcs -> VOID ID LPAREN funcs_prime RPAREN LBRACKET new_scope funcs_vars body RBRACKET SEMICOLON .)


state 153

    (63) else_condition -> ELSE begin_else body .

    SEMICOLON       reduce using rule 63 (else_condition -> ELSE begin_else body .)

